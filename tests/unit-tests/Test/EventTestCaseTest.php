<?php
/**
 * Created by PhpStorm.
 * User: Bartosz Bartniczak <kontakt@bartoszbartniczak.pl>
 */

namespace BartoszBartniczak\EventSourcing\Test;


use BartoszBartniczak\EventSourcing\Event\Id;
use BartoszBartniczak\TestCase\TestCase;

class EventTestCaseMock extends EventTestCase
{
    public function generateEventId(): Id
    {
        return parent::generateEventId(); // TODO: Change the autogenerated stub
    }

    public function generateDateTime(): \DateTime
    {
        return parent::generateDateTime(); // TODO: Change the autogenerated stub
    }


}

class EventTestCaseTest extends \PHPUnit_Framework_TestCase
{

    public function testConstructor()
    {

        $eventTestCase = $this->getMockBuilder(EventTestCase::class)
            ->getMockForAbstractClass();
        /* @var $eventTestCase EventTestCase */

        $this->assertInstanceOf(TestCase::class, $eventTestCase);

    }

    /**
     * @covers \BartoszBartniczak\EventSourcing\Test\EventTestCase::generateDateTime
     * @covers \BartoszBartniczak\EventSourcing\Test\EventTestCase::generateEventId
     */
    public function testGenerators()
    {
        $eventTestCaseMock = new EventTestCaseMock();
        $this->assertInstanceOf(\DateTime::class, $eventTestCaseMock->generateDateTime());
        $this->assertNotSame($eventTestCaseMock->generateDateTime(), $eventTestCaseMock->generateDateTime());

        $this->assertInstanceOf(Id::class, $eventTestCaseMock->generateEventId());
        $this->assertNotSame($eventTestCaseMock->generateEventId(), $eventTestCaseMock->generateEventId());
    }

}
